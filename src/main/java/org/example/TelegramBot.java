package org.example;

import org.example.models.Category;
import org.example.models.Task;
import org.example.models.TaskStatus;
import org.example.services.TaskService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.text.SimpleDateFormat;
import java.util.*;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@Component
public class TelegramBot extends TelegramLongPollingBot {

    @Autowired
    private TaskService taskService;

    private final String botToken;
    private final String botUsername;

    // users States + user Data
    private Map<Long, UserState> userStates = new HashMap<>();
    private Map<Long, TaskCreationData> taskCreationData = new HashMap<>();
    private Map<Long, Long> editingTasks = new HashMap<>();


    //TODO –¥–æ–±–∞–≤–∏—Ç—å EDITING_TASK_CATEGORY –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä
    private enum UserState {
        MAIN_MENU,
        ADDING_TASK_NAME,
        ADDING_TASK_DESCRIPTION,
        ADDING_TASK_DEADLINE,
        EDITING_TASK_NAME,
        EDITING_TASK_DESCRIPTION,
        EDITING_TASK_DEADLINE
    }

    private static class TaskCreationData {
        String name;
        String description;
        Date deadline;
        TaskStatus status = TaskStatus.BACKLOG;
    }

    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("dd.MM.yyyy HH:mm");
    private static final Pattern DATE_PATTERN = Pattern.compile("\\d{2}\\.\\d{2}\\.\\d{4} \\d{2}:\\d{2}");

    public TelegramBot(
            @Value("${telegram.bot.token}") String botToken,
            @Value("${telegram.bot.name}") String botUsername) {
        this.botToken = botToken;
        this.botUsername = botUsername;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasCallbackQuery()) {
            handleCallbackQuery(update.getCallbackQuery());
            return;
        }

        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            Long chatId = update.getMessage().getChatId();
            Long userId = update.getMessage().getFrom().getId();

            if (messageText.equals("/start")) {
                sendWelcomeMessage(chatId);
                userStates.put(userId, UserState.MAIN_MENU);
            } else {
                handleUserInput(messageText, chatId, userId);
            }
        }
    }

    private void handleCallbackQuery(CallbackQuery callbackQuery) {
        String callbackData = callbackQuery.getData();
        Long chatId = callbackQuery.getMessage().getChatId();
        Long userId = callbackQuery.getFrom().getId();
        Integer messageId = callbackQuery.getMessage().getMessageId();

        try {
            if (callbackData.startsWith("complete_")) {
                Long taskId = Long.parseLong(callbackData.replace("complete_", ""));
                completeTask(chatId, userId, taskId, messageId);

            } else if (callbackData.startsWith("edit_")) {
                Long taskId = Long.parseLong(callbackData.replace("edit_", ""));
                startEditingTask(chatId, userId, taskId);

            } else if (callbackData.startsWith("status_")) {
                String[] parts = callbackData.split("_");
                if (parts.length >= 3) {
                    Long taskId = Long.parseLong(parts[1]);
                    String statusStr = parts[2];

                    TaskStatus newStatus;
                    try {
                        if ("IN".equals(statusStr)) {
                            newStatus = TaskStatus.IN_PROGRESS;
                        } else if ("BACKLOG".equalsIgnoreCase(statusStr)) {
                            newStatus = TaskStatus.BACKLOG;
                        } else if ("DONE".equalsIgnoreCase(statusStr)) {
                            newStatus = TaskStatus.DONE;
                        } else {
                            newStatus = TaskStatus.valueOf(statusStr.toUpperCase());
                        }

                        changeTaskStatus(chatId, userId, taskId, newStatus, messageId);
                    } catch (IllegalArgumentException e) {
                        sendMessage(chatId, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: " + statusStr);
                    }
                }

            } else if (callbackData.startsWith("delete_")) {
                Long taskId = Long.parseLong(callbackData.replace("delete_", ""));
                deleteTask(chatId, userId, taskId, messageId);

            } else if (callbackData.equals("back_to_tasks")) {
                showUserTasks(chatId, userId);

            } else if (callbackData.equals("back_to_main")) {
                sendWelcomeMessage(chatId);
                userStates.put(userId, UserState.MAIN_MENU);

            } else if (callbackData.equals("separator")) {
                sendMessage(chatId, "–ê –Ω–µ –Ω–∞–¥–æ –Ω–∞ —Å–µ–ø–∞—Ä–∞—Ç–æ—Ä –∫–ª–∏–∫–∞—Ç—å\uD83D\uDE04");
                userStates.put(userId, UserState.MAIN_MENU);
            }

            AnswerCallbackQuery answer = new AnswerCallbackQuery();
            answer.setCallbackQueryId(callbackQuery.getId());
            execute(answer);

        } catch (Exception e) {
            e.printStackTrace();
            sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞");
        }
    }

    private void handleUserInput(String messageText, Long chatId, Long userId) {
        UserState currentState = userStates.getOrDefault(userId, UserState.MAIN_MENU);

        switch (currentState) {
            case MAIN_MENU:
                handleMainMenu(messageText, chatId, userId);
                break;
            case ADDING_TASK_NAME:
                handleTaskNameInput(messageText, chatId, userId);
                break;
            case ADDING_TASK_DESCRIPTION:
                handleTaskDescriptionInput(messageText, chatId, userId);
                break;
            case ADDING_TASK_DEADLINE:
                handleTaskDeadlineInput(messageText, chatId, userId);
                break;
            case EDITING_TASK_NAME:
                handleEditTaskNameInput(messageText, chatId, userId);
                break;
            case EDITING_TASK_DESCRIPTION:
                handleEditTaskDescriptionInput(messageText, chatId, userId);
                break;
            case EDITING_TASK_DEADLINE:
                handleEditTaskDeadlineInput(messageText, chatId, userId);
                break;
        }
    }

    private void handleMainMenu(String messageText, Long chatId, Long userId) {
        switch (messageText) {
            case "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
                startAddingTask(chatId, userId);
                break;

            case "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏":
                showUserTasks(chatId, userId);
                break;

            case "‚è∞ –ë–ª–∏–∂–∞–π—à–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã":
                showUpcomingDeadlines(chatId, userId);
                break;

            case "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ":
                showCompletedTasks(chatId, userId);
                break;

            case "üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ":
                showInProgressTasks(chatId, userId);
                break;

            case "üì• –ë—ç–∫–ª–æ–≥":
                showBacklogTasks(chatId, userId);
                break;

            case "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
                showSettings(chatId);
                break;

            case "‚ùì –ü–æ–º–æ—â—å":
                showHelp(chatId);
                break;

            case "üîô –ù–∞–∑–∞–¥":
                sendWelcomeMessage(chatId);
                userStates.put(userId, UserState.MAIN_MENU);
                break;

            default:
                sendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é üëÜ");
        }
    }

    private void startAddingTask(Long chatId, Long userId) {
        taskCreationData.put(userId, new TaskCreationData());
        userStates.put(userId, UserState.ADDING_TASK_NAME);

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:");
        message.setReplyMarkup(createBackKeyboard());

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void handleTaskNameInput(String taskName, Long chatId, Long userId) {
        if (taskName.equals("üîô –ù–∞–∑–∞–¥")) {
            sendWelcomeMessage(chatId);
            userStates.put(userId, UserState.MAIN_MENU);
            taskCreationData.remove(userId);
            return;
        }

        TaskCreationData data = taskCreationData.get(userId);
        data.name = taskName;
        userStates.put(userId, UserState.ADDING_TASK_DESCRIPTION);

        sendMessage(chatId, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:");
    }

    private void handleTaskDescriptionInput(String description, Long chatId, Long userId) {
        if (description.equals("üîô –ù–∞–∑–∞–¥")) {
            userStates.put(userId, UserState.ADDING_TASK_NAME);
            sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:");
            return;
        }

        TaskCreationData data = taskCreationData.get(userId);
        data.description = description;
        userStates.put(userId, UserState.ADDING_TASK_DEADLINE);

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:MM\n–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2025 15:30\n\n–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç' –µ—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –Ω–µ –Ω—É–∂–µ–Ω");
        message.setReplyMarkup(createBackKeyboard());

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void handleTaskDeadlineInput(String deadlineInput, Long chatId, Long userId) {
        if (deadlineInput.equals("üîô –ù–∞–∑–∞–¥")) {
            userStates.put(userId, UserState.ADDING_TASK_DESCRIPTION);
            sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:");
            return;
        }

        TaskCreationData data = taskCreationData.get(userId);

        try {
            if (deadlineInput.equalsIgnoreCase("–Ω–µ—Ç")) {
                data.deadline = null;
            } else if (DATE_PATTERN.matcher(deadlineInput).matches()) {
                data.deadline = DATE_FORMAT.parse(deadlineInput);

                if (data.deadline.before(new Date())) {
                    sendMessage(chatId, "‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:");
                    return;
                }
            } else {
                sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:MM\n–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2025 15:30");
                return;
            }

            Task task = taskService.createTask(
                    data.name,
                    data.description,
                    userId,
                    data.status,
                    data.deadline,
                    Category.ANALYTICS
            );

            String taskInfo = "‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n" +
                    "üìù –ù–∞–∑–≤–∞–Ω–∏–µ: " + task.getName() + "\n" +
                    "üìã –û–ø–∏—Å–∞–Ω–∏–µ: " + task.getDescription() + "\n" +
                    "üìä –°—Ç–∞—Ç—É—Å: " + task.getTaskStatus() + "\n" +
                    "üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + task.getCategory() + "\n";

            if (task.getDeadlineTime() != null) {
                taskInfo += "‚è∞ –î–µ–¥–ª–∞–π–Ω: " + DATE_FORMAT.format(task.getDeadlineTime()) + "\n";
            }

            taskInfo += "üÜî ID: " + task.getId();

            SendMessage message = new SendMessage();
            message.setChatId(chatId.toString());
            message.setText(taskInfo);
            message.setReplyMarkup(createMainKeyboard());

            try {
                execute(message);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }

            userStates.put(userId, UserState.MAIN_MENU);
            taskCreationData.remove(userId);

        } catch (Exception e) {
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
            e.printStackTrace();
        }
    }

    private void completeTask(Long chatId, Long userId, Long taskId, Integer messageId) {
        try {
            Task task = taskService.getTaskById(taskId).get(); //TODO –∑–∞–º–µ–Ω–∏—Ç—å get –Ω–∞ orElse
            if (task.getUserOwnerId().equals(userId)) {
                task.setTaskStatus(TaskStatus.DONE);
                taskService.updateTask(task);

                EditMessageText editMessage = new EditMessageText();
                editMessage.setChatId(chatId.toString());
                editMessage.setMessageId(messageId);
                editMessage.setText("‚úÖ –ó–∞–¥–∞—á–∞ '" + task.getName() + "' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!");
                editMessage.setReplyMarkup(createBackToTasksKeyboard());
                execute(editMessage);
            }
        } catch (Exception e) {
            e.printStackTrace();
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏");
        }
    }

    private void changeTaskStatus(Long chatId, Long userId, Long taskId, TaskStatus newStatus, Integer messageId) {
        try {
            Task task = taskService.getTaskById(taskId).get();
            if (task != null && task.getUserOwnerId().equals(userId)) {
                task.setTaskStatus(newStatus);
                taskService.updateTask(task);

                EditMessageText editMessage = new EditMessageText();
                editMessage.setChatId(chatId.toString());
                editMessage.setMessageId(messageId);
                editMessage.setText("üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ '" + task.getName() + "' –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: " + newStatus);
                editMessage.setReplyMarkup(createBackToTasksKeyboard());
                execute(editMessage);
            }
        } catch (Exception e) {
            e.printStackTrace();
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞");
        }
    }

    private void deleteTask(Long chatId, Long userId, Long taskId, Integer messageId) {
        try {
            Task task = taskService.getTaskById(taskId).get();
            if (task != null && task.getUserOwnerId().equals(userId)) {
                taskService.deleteTask(taskId);

                EditMessageText editMessage = new EditMessageText();
                editMessage.setChatId(chatId.toString());
                editMessage.setMessageId(messageId);
                editMessage.setText("üóëÔ∏è –ó–∞–¥–∞—á–∞ '" + task.getName() + "' —É–¥–∞–ª–µ–Ω–∞!");
                editMessage.setReplyMarkup(createBackToTasksKeyboard());
                execute(editMessage);
            }
        } catch (Exception e) {
            e.printStackTrace();
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏");
        }
    }

    private void startEditingTask(Long chatId, Long userId, Long taskId) {
        editingTasks.put(userId, taskId);
        userStates.put(userId, UserState.EDITING_TASK_NAME);

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:");
        message.setReplyMarkup(createBackKeyboard());

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void handleEditTaskNameInput(String newName, Long chatId, Long userId) {
        if (newName.equals("üîô –ù–∞–∑–∞–¥")) {
            showUserTasks(chatId, userId);
            userStates.put(userId, UserState.MAIN_MENU);
            editingTasks.remove(userId);
            return;
        }

        try {
            Long taskId = editingTasks.get(userId);
            Task task = taskService.getTaskById(taskId).get();
            if (task != null && task.getUserOwnerId().equals(userId)) {
                task.setName(newName);
                taskService.updateTask(task);

                userStates.put(userId, UserState.EDITING_TASK_DESCRIPTION);
                sendMessage(chatId, "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:");
            }
        } catch (Exception e) {
            e.printStackTrace();
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è");
        }
    }

    private void handleEditTaskDescriptionInput(String newDescription, Long chatId, Long userId) {
        if (newDescription.equals("üîô –ù–∞–∑–∞–¥")) {
            userStates.put(userId, UserState.EDITING_TASK_NAME);
            sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:");
            return;
        }

        try {
            Long taskId = editingTasks.get(userId);
            Task task = taskService.getTaskById(taskId).get();
            if (task.getUserOwnerId().equals(userId)) {
                task.setDescription(newDescription);
                taskService.updateTask(task);

                userStates.put(userId, UserState.EDITING_TASK_DEADLINE);
                sendMessage(chatId, "–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:");
            }
        } catch (Exception e) {
            e.printStackTrace();
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è");
        }
    }

    private void handleEditTaskDeadlineInput(String deadlineInput, Long chatId, Long userId) {
        if (deadlineInput.equals("üîô –ù–∞–∑–∞–¥")) {
            userStates.put(userId, UserState.EDITING_TASK_DESCRIPTION);
            sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:");
            return;
        }

        try {
            Long taskId = editingTasks.get(userId);
            Task task = taskService.getTaskById(taskId).get();
            if (task.getUserOwnerId().equals(userId)) {
                if (deadlineInput.equalsIgnoreCase("–Ω–µ—Ç")) {
                    task.setDeadlineTime(null);
                } else if (DATE_PATTERN.matcher(deadlineInput).matches()) {
                    Date newDeadline = DATE_FORMAT.parse(deadlineInput);
                    if (newDeadline.before(new Date())) {
                        sendMessage(chatId, "‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:");
                        return;
                    }
                    task.setDeadlineTime(newDeadline);
                } else {
                    sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:MM");
                    return;
                }

                taskService.updateTask(task);
                sendMessage(chatId, "‚úÖ –ó–∞–¥–∞—á–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–∞!");
                showUserTasks(chatId, userId);

                userStates.put(userId, UserState.MAIN_MENU);
                editingTasks.remove(userId);
            }
        } catch (Exception e) {
            e.printStackTrace();
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–µ–¥–ª–∞–π–Ω–∞");
        }
    }

    private void showUpcomingDeadlines(Long chatId, Long userId) {
        Date threeDaysLater = new Date(System.currentTimeMillis() + 3 * 24 * 60 * 60 * 1000);
        List<Task> upcomingTasks = taskService.getTaskListByUser(userId).stream()
                .filter(task -> task.getDeadlineTime() != null && task.getDeadlineTime().before(threeDaysLater))
                .sorted(Comparator.comparing(Task::getDeadlineTime))
                .collect(Collectors.toList());

        if (upcomingTasks.isEmpty()) {
            sendMessage(chatId, "üéâ –ù–µ—Ç –∑–∞–¥–∞—á —Å –±–ª–∏–∂–∞–π—à–∏–º–∏ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏!");
            return;
        }

        StringBuilder messageText = new StringBuilder("‚è∞ –ë–ª–∏–∂–∞–π—à–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã:\n\n");

        for (Task task : upcomingTasks) {
            long hoursLeft = (task.getDeadlineTime().getTime() - System.currentTimeMillis()) / (60 * 60 * 1000);
            String timeLeft = hoursLeft < 24 ? "(" + hoursLeft + " —á–∞—Å–æ–≤)" : "(" + (hoursLeft / 24) + " –¥–Ω–µ–π)";

            messageText.append("‚Ä¢ ").append(task.getName())
                    .append(" - ").append(DATE_FORMAT.format(task.getDeadlineTime()))
                    .append(" ").append(timeLeft)
                    .append("\n");
        }

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(messageText.toString());
        message.setReplyMarkup(createMainKeyboard());

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void showUserTasks(Long chatId, Long userId) {
        List<Task> tasks = taskService.getTaskListByUser(userId);

        if (tasks.isEmpty()) {
            sendMessage(chatId, "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á");
            return;
        }

        StringBuilder tasksText = new StringBuilder("üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n");

        for (Task task : tasks) {
            tasksText.append("‚Ä¢ ").append(task.getName())
                    .append(" [").append(task.getTaskStatus()).append("]");

            if (task.getDeadlineTime() != null) {
                tasksText.append(" - ‚è∞ ").append(DATE_FORMAT.format(task.getDeadlineTime()));
            }

            tasksText.append("\n");
        }

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(tasksText.toString());
        message.setReplyMarkup(createTasksKeyboard(tasks));

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void showCompletedTasks(Long chatId, Long userId) {
        List<Task> tasks = taskService.getTaskByUserIdAndStatus(userId, TaskStatus.DONE);

        StringBuilder tasksText = new StringBuilder("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n");

        if (tasks.isEmpty()) {
            tasksText.append("–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á");
        } else {
            for (Task task : tasks) {
                tasksText.append("‚Ä¢ ").append(task.getName()).append(" ‚úì\n");
            }
        }

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(tasksText.toString());
        message.setReplyMarkup(createMainKeyboard());

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void showInProgressTasks(Long chatId, Long userId) {
        List<Task> tasks = taskService.getTaskByUserIdAndStatus(userId, TaskStatus.IN_PROGRESS);

        StringBuilder tasksText = new StringBuilder("üîÑ –ó–∞–¥–∞—á–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ:\n\n");

        if (tasks.isEmpty()) {
            tasksText.append("–ù–µ—Ç –∑–∞–¥–∞—á –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è");
        } else {
            for (Task task : tasks) {
                tasksText.append("‚Ä¢ ").append(task.getName()).append("\n");
            }
        }

        sendMessage(chatId, tasksText.toString());
    }

    private void showBacklogTasks(Long chatId, Long userId) {
        List<Task> tasks = taskService.getTaskByUserIdAndStatus(userId, TaskStatus.BACKLOG);

        StringBuilder tasksText = new StringBuilder("üì• –ó–∞–¥–∞—á–∏ –≤ –±—ç–∫–ª–æ–≥–µ:\n\n");

        if (tasks.isEmpty()) {
            tasksText.append("–ù–µ—Ç –∑–∞–¥–∞—á –≤ –±—ç–∫–ª–æ–≥–µ");
        } else {
            for (Task task : tasks) {
                tasksText.append("‚Ä¢ ").append(task.getName()).append("\n");
            }
        }

        sendMessage(chatId, tasksText.toString());
    }

    private void showSettings(Long chatId) {
        String settingsText = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n" +
                "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚úÖ –í–∫–ª\n" +
                "‚Ä¢ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: 09:00\n" +
                "‚Ä¢ –Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π\n" +
                "‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC+3";

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(settingsText);
        message.setReplyMarkup(createMainKeyboard());

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void showHelp(Long chatId) {
        String helpText = "‚ùì –ü–æ–º–æ—â—å:\n\n" +
                "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É \"üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\"\n" +
                "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:MM\n" +
                "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ –≤ \"üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏\"\n" +
                "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –±–ª–∏–∂–∞–π—à–∏–º–∏ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ –≤ \"‚è∞ –ë–ª–∏–∂–∞–π—à–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã\"\n" +
                "‚Ä¢ –û—Ç–º–µ—á–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n\n" +
                "üìÖ –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: 25.12.2025 15:30";

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(helpText);
        message.setReplyMarkup(createMainKeyboard());

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendWelcomeMessage(Long chatId) {
        String welcomeText = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Task Manager Bot!\n\n" +
                "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:";

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(welcomeText);
        message.setReplyMarkup(createMainKeyboard());

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    private ReplyKeyboardMarkup createMainKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);
        keyboardMarkup.setSelective(true);

        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É");
        row1.add("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("‚è∞ –ë–ª–∏–∂–∞–π—à–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã");
        row2.add("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ");

        KeyboardRow row3 = new KeyboardRow();
        row3.add("üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ");
        row3.add("üì• –ë—ç–∫–ª–æ–≥");

        KeyboardRow row4 = new KeyboardRow();
        row4.add("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏");
        row4.add("‚ùì –ü–æ–º–æ—â—å");

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);
        keyboard.add(row4);

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    private InlineKeyboardMarkup createTasksKeyboard(List<Task> tasks) {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (Task task : tasks) {
            List<InlineKeyboardButton> infoRow = new ArrayList<>();
            InlineKeyboardButton infoButton = new InlineKeyboardButton();
            infoButton.setText("üìù " + task.getName() + " [" + task.getTaskStatus() + "]");
            infoButton.setCallbackData("info_" + task.getId());
            infoRow.add(infoButton);
            rows.add(infoRow);

            List<InlineKeyboardButton> actionRow = new ArrayList<>();

            InlineKeyboardButton completeButton = new InlineKeyboardButton();
            completeButton.setText("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ");
            completeButton.setCallbackData("complete_" + task.getId());
            actionRow.add(completeButton);

            InlineKeyboardButton editButton = new InlineKeyboardButton();
            editButton.setText("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å");
            editButton.setCallbackData("edit_" + task.getId());
            actionRow.add(editButton);

            rows.add(actionRow);

            List<InlineKeyboardButton> statusRow = new ArrayList<>();

            if (task.getTaskStatus() != TaskStatus.IN_PROGRESS) {
                InlineKeyboardButton inProgressButton = new InlineKeyboardButton();
                inProgressButton.setText("üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ");
                inProgressButton.setCallbackData("status_" + task.getId() + "_IN_PROGRESS");
                statusRow.add(inProgressButton);
            }

            if (task.getTaskStatus() != TaskStatus.BACKLOG) {
                InlineKeyboardButton backlogButton = new InlineKeyboardButton();
                backlogButton.setText("üì• –í –±—ç–∫–ª–æ–≥");
                backlogButton.setCallbackData("status_" + task.getId() + "_BACKLOG");
                statusRow.add(backlogButton);
            }

            if (!statusRow.isEmpty()) {
                rows.add(statusRow);
            }

            List<InlineKeyboardButton> deleteRow = new ArrayList<>();
            InlineKeyboardButton deleteButton = new InlineKeyboardButton();
            deleteButton.setText("‚ùå –£–¥–∞–ª–∏—Ç—å");
            deleteButton.setCallbackData("delete_" + task.getId());
            deleteRow.add(deleteButton);
            rows.add(deleteRow);

            List<InlineKeyboardButton> separatorRow = new ArrayList<>();
            InlineKeyboardButton separatorButton = new InlineKeyboardButton();
            separatorButton.setText("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
            separatorButton.setCallbackData("separator");
            separatorRow.add(separatorButton);
            rows.add(separatorRow);
        }

        List<InlineKeyboardButton> backRow = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é");
        backButton.setCallbackData("back_to_main");
        backRow.add(backButton);
        rows.add(backRow);

        keyboardMarkup.setKeyboard(rows);
        return keyboardMarkup;
    }

    private InlineKeyboardMarkup createBackToTasksKeyboard() {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        List<InlineKeyboardButton> row = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("üîô –ö —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á");
        backButton.setCallbackData("back_to_tasks");
        row.add(backButton);

        rows.add(row);
        keyboardMarkup.setKeyboard(rows);
        return keyboardMarkup;
    }

    private ReplyKeyboardMarkup createBackKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(true);

        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add("üîô –ù–∞–∑–∞–¥");

        keyboard.add(row);
        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    private void sendMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }
}